@page "/Register"

@inject MainProto.MainProtoClient MainClient

@inject NavigationManager navigationManager
@inject AccountManager accountManager
@inject SingletonVariables sv

<PageTitle>Register</PageTitle>

<style>
    main {
        width: 90% !important;
    }

    .form-group {
        background-color: initial;
    }

    span {
        font-size: 10pt;
    }

    label {
        font-size: 18pt;
    }

    label, h4 {
        color: white;
    }

    a {
        color: #0366d6;
    }

    .li {
        color: white;
        text-align: left;
        font-size: 16pt;
        border: none;
        padding: 0;
    }

    h4 {
        font-size: 22pt;
    }

    hr {
        border-color: grey;
    }

    .bl {
        border: 2px solid black;
        border-radius: 1rem;
    }

    .sp {
        margin: 0 auto;
        text-align: center;
        width: 100%;
    }

    .pl {
        text-align: center;
        font-size: 14pt;
    }

    .login {
        border-radius: 1rem 0 0 1rem;
    }

    .feed {
        border-radius: 0 1rem 1rem 0;
    }
</style>

@if (!sv.isDesktop)
{
    <style>
        .login {
            border-radius: 1rem 1rem 0 0;
        }

        .feed {
            border-radius: 0 0 1rem 1rem;
        }

        .li {
            font-size: 9pt;
        }

        .intro {
            flex-direction: column !important;
        }

        .exp p, h5 {
            font-size: 6pt;
        }

        .regform {
            width: 100% !important;
        }

        .btnIndex {
            margin-bottom: 2rem !important;
        }

        #sep {
            display: none;
        }

        .bl {
            flex-direction: column;
        }
    </style>
}

<EditForm Model="loginUser" OnValidSubmit="RegisterAccount" class="regform p-2" style="background-color: initial !important; left: 0; bottom: 0;">
    <h4>Create a new account</h4>
    <hr />

    <DataAnnotationsValidator />
    <ValidationSummary />

    @if (!string.IsNullOrWhiteSpace(error))
    {
        <p>@error</p>
    }

    <div class="form-group">
        <label for="username">Username <span style="color: black;">(Case sensitive and no spaces)</span></label>
        <InputText @bind-Value="loginUser.Username" class="form-control" id="username" pattern="^\S+$"></InputText>
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <InputText @bind-Value="loginUser.Password" type="password" class="form-control" id="password"></InputText>
    </div>

    <div class="form-group">
        <label for="confirmPassword">Confirm Password</label>
        <InputText @bind-Value="loginUser.ConfirmPassword" type="password" class="form-control" id="confirmPassword"></InputText>
    </div>

    <div class="form-group">
        <label for="key">PIN code <span style="color: black;">(The PIN code is a string, so it can have letters, special characters, and can be longer or shorter than 4 digits. If you don't want to deal with a PIN code for extra security, leave it exactly at <q>0000</q>)</span></label>
        <InputText @bind-Value="loginUser.PrivateKey" class="form-control" id="key"></InputText>
    </div>

    <button type="submit" class="btn btn-primary-fill" style="background-color: #655876; color: white; opacity: 1;">Register</button>
    <a href="/Account/Manager" @onclick="@(() => navigationManager.NavigateTo("/Account/Manager", true))" class="btn btn-primary-fill" style="background-color: #655876; color: white;">Login</a>
</EditForm>

@code {
    private LoginUser loginUser = new();
    private string error = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        loginUser.PrivateKey = "0000";
    }

    private async Task RegisterAccount()
    {
        try
        {
            var ca = await MainClient.CreateAccountAsync(loginUser);

            var b = await accountManager.SetupAccountAsync(loginUser);
            if (b)
                navigationManager.NavigateTo("introduction", true);
        }
        catch (System.Exception ex)
        {
            error = "Error: User already exist, or there was an error in creating account.";
        }
    }
}
